<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>👨🏻‍💻Compose编程思想</title>
    <link href="/2024/08/08/Kotlin%20Compose/"/>
    <url>/2024/08/08/Kotlin%20Compose/</url>
    
    <content type="html"><![CDATA[<h3 id="1、声明性编程范式"><a href="#1、声明性编程范式" class="headerlink" title="1、声明性编程范式"></a>1、声明性编程范式</h3><p>与之前的视图编写方式不同，compose是声明式，而之前是命令式。</p><h3 id="2、组合函数"><a href="#2、组合函数" class="headerlink" title="2、组合函数"></a>2、组合函数</h3><p>使用 Compose，可以通过定义一组接受数据而发出界面元素的可组合函数来构建界面。</p><p><img src="/../images/compose/compose_1.png" alt="Untitled"></p><p>关于Compose，有几点注意关注的地方：</p><ol><li>此函数带有 <code>@Composable</code> 注释。所有可组合函数都必须带有此注释；此注释可告知 Compose 编译器：此函数旨在将数据转换为界面。</li><li>此函数接受数据。可组合函数可以接受一些参数，这些参数可让应用逻辑描述界面。</li><li>此函数可以在界面中显示文本。为此，它会调用 <code>Text()</code> 可组合函数，该函数实际上会创建文本界面元素。可组合函数通过调用其他可组合函数来发出界面层次结构。</li><li>此函数不会返回任何内容。发出界面的 Compose 函数不需要返回任何内容，因为它们描述所需的屏幕状态，而不是构造界面 widget。</li></ol><h3 id="3、声明性范式转变"><a href="#3、声明性范式转变" class="headerlink" title="3、声明性范式转变"></a>3、<strong>声明性范式转变</strong></h3><p>在 Compose 的声明性方法中，widget 相对无状态，并且不提供 setter 或 getter 函数。</p><p><img src="/../images/compose/compose_2.png" alt="应用逻辑为顶级可组合函数提供数据。该函数通过调用其他可组合函数来使用这些数据描述界面，将适当的数据传递给这些可组合函数，并沿层次结构向下传递数据。当用户与界面交互时，界面会发起 `onClick` 等事件。这些事件应通知应用逻辑，应用逻辑随后可以改变应用的状态。当状态发生变化时，系统会使用新数据再次调用可组合函数。这会导致重新绘制界面元素，此过程称为“重组”。"></p><p>应用逻辑为顶级可组合函数提供数据。该函数通过调用其他可组合函数来使用这些数据描述界面，将适当的数据传递给这些可组合函数，并沿层次结构向下传递数据。当用户与界面交互时，界面会发起 <code>onClick</code> 等事件。这些事件应通知应用逻辑，应用逻辑随后可以改变应用的状态。当状态发生变化时，系统会使用新数据再次调用可组合函数。这会导致重新绘制界面元素，此过程称为“重组”。</p><p><img src="/../images/compose/compose_3.png" alt="用户与界面元素进行了交互，导致触发一个事件。应用逻辑响应该事件，然后系统根据需要使用新参数自动再次调用可组合函数。"></p><p>用户与界面元素进行了交互，导致触发一个事件。应用逻辑响应该事件，然后系统根据需要使用新参数自动再次调用可组合函数。</p><h3 id="4、动态内容"><a href="#4、动态内容" class="headerlink" title="4、动态内容"></a>4、<strong>动态内容</strong></h3><p>由于可组合函数是用 Kotlin 而不是 XML 编写的，因此它们可以像其他任何 Kotlin 代码一样动态。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(names: <span class="hljs-type">List</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> (name <span class="hljs-keyword">in</span> names) &#123;<br>        Text(<span class="hljs-string">&quot;Hello <span class="hljs-variable">$name</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可组合函数可能非常复杂。可以使用 <code>if</code> 语句来确定是否要显示特定的界面元素。可以使用循环。可以调用辅助函数。拥有底层语言的全部灵活性。这种强大的功能和灵活性是 Jetpack Compose 的主要优势之一。</p><h3 id="5、重组"><a href="#5、重组" class="headerlink" title="5、重组"></a>5、<strong>重组</strong></h3><p>在命令式界面模型中，如需更改某个 widget，可以在该 widget 上调用 setter 以更改其内部状态。在 Compose 中，可以使用新数据再次调用可组合函数。这样做会导致函数进行重组 – 系统会根据需要使用新数据重新绘制函数发出的 widget。Compose 框架可以智能地仅重组已更改的组件。</p><p>有以下可组合函数，它用于显示一个按钮：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ClickCounter</span><span class="hljs-params">(clicks: <span class="hljs-type">Int</span>, onClick: () -&gt; <span class="hljs-type">Unit</span>)</span></span> &#123;<br>    Button(onClick = onClick) &#123;<br>        Text(<span class="hljs-string">&quot;I&#x27;ve been clicked <span class="hljs-variable">$clicks</span> times&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重组是指在输入更改时再次调用可组合函数的过程。</strong></p><p>当函数的输入更改时，会发生这种情况。当 Compose 根据新输入重组时，它仅调用可能已更改的函数或 lambda，而跳过其余函数或 lambda。通过跳过所有未更改参数的函数或 lambda，Compose 可以高效地重组。</p><p>切勿依赖于执行可组合函数所产生的附带效应，因为可能会跳过函数的重组。</p><p>如果这样做，用户可能会在应用中遇到奇怪且不可预测的行为。附带效应是指对应用的其余部分可见的任何更改。例如，以下操作全部都是危险的附带效应：</p><ul><li>写入共享对象的属性</li><li>更新 <code>ViewModel</code> 中的可观察项</li><li>更新共享偏好设置</li></ul><p>可组合函数可能会像每一帧一样频繁地重新执行，例如在呈现动画时。可组合函数应快速执行，以避免在播放动画期间出现卡顿。</p><p><strong>总结一下重组需要的注意事项：</strong></p><ul><li>可组合函数可以按任何顺序执行。</li><li>可组合函数可以并行执行。</li><li>重组会跳过尽可能多的可组合函数和 lambda。</li><li>重组是乐观的操作，可能会被取消。</li><li>可组合函数可能会像动画的每一帧一样非常频繁地运行。</li></ul><h4 id="5-1-可组合函数可以按任何顺序执行"><a href="#5-1-可组合函数可以按任何顺序执行" class="headerlink" title="5.1 可组合函数可以按任何顺序执行"></a>5.1 <strong>可组合函数可以按任何顺序执行</strong></h4><p>假设有如下代码，用于绘制三个View：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ButtonRow</span><span class="hljs-params">()</span></span> &#123;<br>    MyFancyNavigation &#123;<br>        StartScreen()<br>        MiddleScreen()<br>        EndScreen()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-可组合函数可以并行运行"><a href="#5-2-可组合函数可以并行运行" class="headerlink" title="5.2 可组合函数可以并行运行"></a>5.2 <strong>可组合函数可以并行运行</strong></h4><p>Compose 可以通过并行运行可组合函数来优化重组。这样一来，Compose 就可以利用多个核心，并以较低的优先级运行可组合函数（不在屏幕上）。</p><p>这种优化意味着，可组合函数可能会在后台线程池中执行。如果某个可组合函数对 <code>ViewModel</code> 调用一个函数，则 Compose 可能会同时从多个线程调用该函数。</p><p>为了确保应用正常运行，所有可组合函数都不应有附带效应，而应通过始终在界面线程上执行的 <code>onClick</code> 等回调触发附带效应。</p><p>调用某个可组合函数时，调用可能发生在与调用方不同的线程上。这意味着，应避免使用修改可组合 lambda 中的变量的代码，既因为此类代码并非线程安全代码，又因为它是可组合 lambda 不允许的附带效应。</p><p>正确的示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ListComposable</span><span class="hljs-params">(myList: <span class="hljs-type">List</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    Row(horizontalArrangement = Arrangement.SpaceBetween) &#123;<br>        Column &#123;<br>            <span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> myList) &#123;<br>                Text(<span class="hljs-string">&quot;Item: <span class="hljs-variable">$item</span>&quot;</span>)<br>            &#125;<br>        &#125;<br>        Text(<span class="hljs-string">&quot;Count: <span class="hljs-subst">$&#123;myList.size&#125;</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误的示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span><br><span class="hljs-meta">@Deprecated(<span class="hljs-string">&quot;Example with bug&quot;</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ListWithBug</span><span class="hljs-params">(myList: <span class="hljs-type">List</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> items = <span class="hljs-number">0</span><br><br>    Row(horizontalArrangement = Arrangement.SpaceBetween) &#123;<br>        Column &#123;<br>            <span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> myList) &#123;<br>                Text(<span class="hljs-string">&quot;Item: <span class="hljs-variable">$item</span>&quot;</span>)<br>                items++ <span class="hljs-comment">// Avoid! Side-effect of the column recomposing.</span><br>            &#125;<br>        &#125;<br>        Text(<span class="hljs-string">&quot;Count: <span class="hljs-variable">$items</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-重组会跳过尽可能多的内容"><a href="#5-3-重组会跳过尽可能多的内容" class="headerlink" title="5.3 重组会跳过尽可能多的内容"></a>5.3 <strong>重组会跳过尽可能多的内容</strong></h4><p>如果界面的某些部分无效，Compose 会尽力只重组需要更新的部分。这意味着，它可以跳过某些内容以重新运行单个按钮的可组合项，而不执行界面树中在其上面或下面的任何可组合项。</p><p>每个可组合函数和 lambda 都可以自行重组。</p><p>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">NamePicker</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    header: <span class="hljs-type">String</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    names: <span class="hljs-type">List</span>&lt;<span class="hljs-type">String</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">    onNameClicked: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> &#123;<br>    Column &#123;<br>        <span class="hljs-comment">// 当header更改时，这将重新组合，但当names更改时，不会重新组合</span><br>        Text(header, style = MaterialTheme.typography.h5)<br>        Divider()<br>        <span class="hljs-comment">// LazyColumn 是 RecyclerView 的 Compose 版本。</span><br>        <span class="hljs-comment">// 传递给 items() 的 lambda 类似于 RecyclerView.ViewHolder。</span><br>        LazyColumn &#123;<br>            items(names) &#123; name -&gt;<br>                <span class="hljs-comment">// 当项目的name更新时，该项目的适配器将重新组合。 </span><br>                                <span class="hljs-comment">// 当header更改时，这不会重新组合</span><br>                NamePickerItem(name, onNameClicked)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Composable</span><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">NamePickerItem</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, onClicked: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span>)</span></span> &#123;<br>    Text(name, Modifier.clickable(onClick = &#123; onClicked(name) &#125;))<br>&#125;<br></code></pre></td></tr></table></figure><p>同样，执行所有可组合函数或 lambda 都应该没有附带效应。当您需要执行附带效应时，应通过回调触发。</p><h4 id="5-4-重组是乐观的操作"><a href="#5-4-重组是乐观的操作" class="headerlink" title="5.4 重组是乐观的操作"></a>5.4 <strong>重组是乐观的操作</strong></h4><p>只要 Compose 认为某个可组合项的参数可能已更改，就会开始重组。重组是乐观的操作，也就是说，Compose 预计会在参数再次更改之前完成重组。如果某个参数在重组完成之前发生更改，Compose 可能会取消重组，并使用新参数重新开始。</p><p>取消重组后，Compose 会从重组中舍弃界面树。如有任何附带效应依赖于显示的界面，则即使取消了组合操作，也会应用该附带效应。这可能会导致应用状态不一致。</p><p>确保所有可组合函数和 lambda 都幂等且没有附带效应，以处理乐观的重组。</p><h4 id="5-5-可组合函数可能会非常频繁地运行"><a href="#5-5-可组合函数可能会非常频繁地运行" class="headerlink" title="5.5 可组合函数可能会非常频繁地运行"></a>5.5 <strong>可组合函数可能会非常频繁地运行</strong></h4><p>在某些情况下，可能会针对界面动画的每一帧运行一个可组合函数。如果该函数执行成本高昂的操作（例如从设备存储空间读取数据），可能会导致界面卡顿。</p><p>如果可组合函数需要数据，它应为相应的数据定义参数。然后，您可以将成本高昂的工作移至组成操作线程之外的其他线程，并使用 <code>mutableStateOf</code>  将相应的数据传递给 Compose。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/08/hello-world/"/>
    <url>/2024/08/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
